#+TITLE: Functions
#+AUTHOR: Peter Moresi

The long-term goal is to build npm packages for
all 300 or so functions supported commonly by spreadsheet
software. The purpose is to make an infrastructure of UMD
code that can be added to any modern browser and node.js.
This infrastruture will consist of small packages that each
contain one pure function or one group of pure functions.

The functions in this library do not have side effects. They
accept input and they return output. This is what makes them
pure. This makes the functions easy to compose because they
can nested indefinitely. This is not new. This is how spreadsheets 
work today.

This project seeks to make it easy to selectively and automatically
load the dependencies needed to fulfill the user's requirements to complete
the calculations.

While, I plan to provide a workbook model that will run today's 
spreadsheets. I don't want your imagination to stop there. These
functions will happily operate on JS objects of any kind. You can
use the logical functions to clean up JSX.

#+BEGIN_SRC js
var IF = require('formula-if');
let el = <div className={ IF( this.state.shouldBeTrue, "YES-CSS", "NO" ) } />
#+END_SRC

The TEXT function can format numbers with spreadsheet format codes.

#+BEGIN_SRC js
var textFormatter = require('formula-text'); // call it what you like
textFormatter( 100, "$#,###.##" ) // => $100.00
#+END_SRC

There are a lot of useful functions today and many more will be added in the future.

* Status 

  |---+----------------------+-----------+-------+---------+--------+-----+----------|
  |   | Category             | Completed | Total | % Coded | Github | NPM | CircleCI |
  |---+----------------------+-----------+-------+---------+--------+-----+----------|
  | # | Logical              |         9 |     9 |  100.0% |      9 |   9 |        1 |
  | # | Date and Time        |        17 |    23 |   74.0% |      0 |   0 |        0 |
  | # | Engineering          |         2 |    51 |    4.0% |      0 |   0 |        0 |
  | # | Financial            |         8 |    31 |   26.0% |      0 |   0 |        0 |
  | # | Information          |        22 |    23 |   96.0% |     11 |  11 |        0 |
  | # | Lookup and Reference |        12 |    12 |  100.0% |      3 |   3 |        0 |
  | # | Math                 |        44 |    69 |   64.0% |     11 |  11 |        0 |
  | # | Stats                |         5 |    54 |   10.0% |      0 |   0 |        0 |
  | # | Text                 |        24 |    29 |   83.0% |      0 |   0 |        0 |
  |---+----------------------+-----------+-------+---------+--------+-----+----------|
  | # | Total                |       115 |   218 |   53.0% |        |     |          |
  |---+----------------------+-----------+-------+---------+--------+-----+----------|
  #+TBLFM: @3$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@4$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@5$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@6$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@2$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@7$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@8$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@9$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@10$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")::@11$3=vsum(@5..10)::@11$4=vsum(@5..10)::@11$5='(concat (number-to-string (fceiling (* 100 (/ (string-to-number (concat $3 ".0")) (string-to-number $4))))) "%")

* Logical
  :PROPERTIES: 
  :ID:     logical
  :END:
** DONE AND
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns TRUE if all arguments evaluate to TRUE; otherwise returns FALSE.
   
   
   
   
   
** DONE OR
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns TRUE if any argument is true.
   
   
   
   
   
** DONE NOT
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns TRUE when FALSE and FALSE when TRUE;
   
   
   
   
   
** DONE IF
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns true_value if a condition you specify evaluates to TRUE and false_value if it evaluates to FALSE.
   
   
   
** DONE IFERROR
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns a value you specify if a formula evaluates to an error; otherwise, 
   returns the result of the formula.
   
   
   
** DONE IFNA
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns the value you specify if the formula returns the #N/A error value; otherwise returns the result of the formula.
   
   
   
** DONE SWITCH
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Evaluates an expression against a list of values and returns the matching result.
   
   
   "August", 9, "September", 10, "October", 11, "November", 12,
   "December", "Unknown month number") = "January"
   #+END_EXAMPLE
   
   
   
   
   
** DONE CHOOSE
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :circleci: y
   :END:
   
   Choose a value from a list.
   
   
   
   
   
** DONE XOR
   :PROPERTIES: 
   :published: y
   :github:   y
   :npm:      y
   :END:
   
   Returns the exclusive OR for argument1, argument2...argumentN.
   
   
   
* Information
  :PROPERTIES: 
  :ID:       information
  :END:
** CELL
   
   Returns information about a cell.
   
** DEPENDENTS
   
   Returns the list of dependents for a given cell.
   
** INFO
   
   Returns information about the operating environment running your workbook.
   
   |-----------+-----------------------------------------------------+-----------|
   | Text Type | Returns                                             | Supported |
   |-----------+-----------------------------------------------------+-----------|
   | directory | Location where spreadsheet is stored                |           |
   | numfile   | Count of active worksheets in all open workbooks    |           |
   | origin    | #NA!                                                |           |
   | osversion | Returns browser or container version                |           |
   | recalc    | Current recalculation mode; "Automatic" or "Manual" |           |
   | release   | Version number; as text                             |           |
   | system    | Return browser or container name                    |           |
   |-----------+-----------------------------------------------------+-----------|
   
** DONE ISARRAY
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   
   Tests if the value is an array.
   
   
   
   
   
** DONE ISBLANK
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   
   Tests if the value is blank (empty).
   
** DONE ISEMAIL
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** DONE ISERR
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   
   Test for any error but #N/A.

** DONE ISERROR
   
   Test for error.
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** DONE ISEVEN
   
   Test for even number.
   
:PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** DONE ISFORMULA
   
   Test if cell has formula.
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** ISLOGICAL
   
   Test for TRUE or FALSE
   
   
   
   
   
   
   
   
   
** DONE ISNA
   
   Test for NA error.
   
   
   
   
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** ISNONTEXT
   
   Test for non text
   
   
   
   
   
** DONE ISNUMBER
   
   Returns TRUE if the *value_to_check* is a number.
   
   
   
   
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** DONE ISODD
   
   Returns true if the value is odd.
   
   
   
   
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** DONE ISTEXT
   
   Returns TRUE if the value is text.
   
   
   
   
   
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
** ISRANGE
   
   Return TRUE when the value is a range or a cell reference.
   
** ISREF
   
   Return TRUE when the value is a range or a cell reference.
   
** ISURL
** N
   
   Returns a value converted to a number.
   
   
   
   
   
   
   
** NA
   
   Returns the error "#NA!"
   
** PRECEDENTS
   
   Return the list of precedents for a given cell.
   
** SHEET
   
   Returns a named worksheet.
   
** SHEETS
   
   Returns the number of sheets in the workbook.
   
** TYPE
   
   Returns the type of value. Use TYPE when the behavior of another function depends on the type of value in a particular cell.
   
* Lookup and Reference
  :PROPERTIES: 
  :ID:       lookup
  :END:
** DONE ADDRESS
   
   Returns a cell reference given a row and column.
   
   
   
   
   
   
   
** DONE COLUMN
   
   Returns the column number of a specified cell.
   
   
   
   
   
** DONE COLUMNS
   
   Returns the number of columns in a specified array or range.
   
   
   
   All columns must be same size.
   
   
   
   When they are not the same size then #VALUE? is returned.
   
   
   
** DONE HLOOKUP
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   
   Lookup a value in a table hortizonally on the first row and retreive a value from the matching column and specified row.
   
   HLOOKUP(lookup_value, lookup_array, index, exactmatch)
   
   
   
** DONE INDEX
   
   Lookup an index in an array or reference.
   
   Array Form
   
   INDEX(array, row_num, [column_num])
   
   
   
   
   
   
   
   
   
   Referenced Form
   
   INDEX(reference, row_offset, [column_offset])
   
** DONE INDIRECT
   
   Returns a cell reference given a string.
   
   
   
** DONE LOOKUP
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   Vector Form

   LOOKUP(lookup_value, lookup_vector, lookup_array)

     

   Array Form 

   The array form searches the array by row or column depending on the dimensions of the array.
   
   If the array is wider then tall then the search is on the first row; the result being from the matching row and last column.

   If the array is taller then wide then the search is on the first column; the result being from the last row and matching column.

   LOOKUP(lookup_value, lookup_array)

   Wide Array:
     

   Tall Array:
     

** DONE MATCH
   
   Returns the column matched by a *lookup_value* in a *lookup_reference*.
   
   MATCH(lookup_value, lookup_reference, match_type)
   
   
   
   
   
   
   
   
   
   
   
   
   
** DONE OFFSET
   Returns a reference to a cell a given number of rows and columns from a reference.

   OFFSET(ref, rows, cols, height, width)
    
** ROW
   
   Returns the row number of a specified cell.
   
   
   
   
   
** ROWS
   
   Returns the number of rows in a specified array or range.
   
   
   
** DONE VLOOKUP
   :PROPERTIES:
   :github:   y
   :npm:      y
   :END:
   
   Lookup a value in a table hortizonally on the first row and retreive a value from the matching row and specified column.
   
   VLOOKUP(lookup_value, lookup_reference, index, [exactmatch])
   
   
   
* Date and Time
  :PROPERTIES:
  :ID:       date
  :END:
** DATE
   Returns a serial number that represents a date given a year, month and day.

   DATE(year, month, day)
    
    
    
    
    
** DATEVALUE
   Returns the serial number with *year*, *month* and *day*.
    
   DATEVALUE(year, month, day)
    
   or
    
   DATEVALUE(date_text)
    
    
    
    
    
** DATEDIF

   Calculates the number of days, months or years between two date.

    
    DATEDIF(start_date, end_date, unit)
    
    Arguments:
    
    | start_date | The beginning of a period. Dates may be entered as text string, serial number or result of function (e.g. DATEVALUE("2015-01-01") |
    | end_date   | The end of a period.                                                                                                              |
    | unit       | The type of information you want to calculate.                                                                                    |
    
    Unit Types:
    
    | "Y"  | The number of complete years in the period                                                      |
    | "M"  | The number of complete months in the period                                                     |
    | "D"  | The number of days in the period                                                                |
    | "MD" | The difference between the days in the start_date and end_date. The month and year are ignored  |
    | "YM" | The difference between the months in the start_date and end_date. The days and year are ignored |
    | "YD" | The difference between the days in the start_date and end_date. The years are ignored           |
    
    
    
    
    
    
    
    
    
    
    
    
** DAY
   
   Returns the day of the month for a date.
   
   
   
   
   
** DAYS360
   
   Returns the number of days between two dates based on a 360-day year.
   
   
   
** EDATE
   
   Returns the serial number for a date represented by a string or JSDate object.
   
   
   
** EOMONTH
   
   Returns the last day of the month.
   
   
   
** HOUR
   
   Accepts a serial number and returns the hour from 0-24.
   
   
   
   
   
   
   
   
   
   
   
   
   
** ISLEAPYEAR
   
   Returns true if the date is a leap year
   
   
   
** ISOWEEKNUM                                                      :noexport:
** MINUTE
   
   Returns the minutes of a time value. The value is 0...59.
   
   
   
** MONTH
   
   Returns the month for a date.
   
   
   
   
   
   
   
   
   
** NETWORKDAYS                                                     :noexport:
** NOW
   
   Returns the current date/time.
   
   
   
** SECOND
   
   Returns the seconds of a time value. The value is 0...59.
   
   
   
   
   
** TIME
   
   Returns a decimal representation of time.
   
   
   
** TIMEVALUE
   
   Parses text representation of time into decimal representation.
   
   
   
   
   
   
   
   
   
   
   
   
   
** TODAY
   
   Returns the current date.
   
   
   
** WEEKDAY
** WEEKNUM
** WORKDAY
** YEAR
   
   Returns the year for a date.
   
   
   
** YEARFRAC
   
* Text
  :PROPERTIES:
  :ID:       text
  :END:
** ASC                                                        :i18n:noexport:
   
   For Double-byte character set (DBCS) languages, the function changes full-width (double-byte) characters to half-width (single-byte) characters.
   
** BAHTTEXT                                                   :i18n:noexport:
   
   Converts a number to Thai text and adds a suffix of "Baht."
   
** CLEAN
   
   Removes non-printing characters from ASCII data.
   
   
   
** CHAR
   
   Returns the character for the ASCII code.
   
   
   
** CODE
   
   Returns the code for the ASCII character.
   
   
   
** CONCATENATE
   
   Combines two or more strings into a single value.
   
   
   
   The short name *CONCAT* refers to the same function.
   
   
   
** DBCS                                                       :i18n:noexport:
   
   The function described in this Help topic converts half-width (single-byte) letters within a character string to full-width (double-byte) characters. The name of the function (and the characters that it converts) depends upon your language settings.
   
** DOLLAR
   
   Convert a number to formatted currency text with the format code: $#,##0.00_);($#,##0.00).
   
   
   
   
   
** EXACT
   
   Compares two values and return TRUE only if the both are strings and both are identical content with a case-sensitive comparision.
   
   
   
   
   
** FIND
   
   Returns the position of text.
   
   
   
   
   
   
   
   
   
** FIXED
   
   Rounds a number to a specified number of decimal places.
   
   
   
   
   
   
   
** LEFT
   
   Returns a specified number of character starting from the left side.
   
   
   
** LEN
   
   Returns the length of a string.
   
   
   
** LOWER
   
   Sets the text to lower case.
   
   
   
** JOIN
   
   Join an array into a string with a specified delimiter.
   
   
   
** MID
   
   Returns the a section from a text string; based on the specified text, start position and number of characters.
   
   
   
** NUMBERVALUE                                                     :noexport:
   
   Converts text to a number, in a locale-independent way.
   
** PRONETIC                                          :i18n:furigana:noexport:
** PROPER
   
   Converts a text string to proper case.
   
   
   
** REPLACE
   
   REPLACE( old_text, start, number_of_chars, new_text )
   
   
   
** REPT
   
   Repeat a string a given number of times.
   
   
   
** RIGHT
   
   Returns a specified number of character starting from the right side.
   
   
   
** SEARCH                                                          :noexport:
   
   Search for text with wildcards.
   
** SPLIT
   
   Split a string by a specified delimiter.
   
   
   
** SUBSTITUTE
   
   SUBSTITUTE(text,old_text,new_text,instance_num)
   
   
   
** T
   
   Return text or empty string
   
   
   
   
   
** TEXT
   
   TEXT(rawValue, formatCode[, currentCode]) : Format numbers, currency, date and time. 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
** TRIM
   
   
   
** UPPER
   
   Sets the text to upper case.
   
   
   
** VALUE
   
   Converts text into a number.
   
   
   
   
   
   
   
* Math
  :PROPERTIES:
  :ID:       math
  :END:
** ABS
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      

   Returns the absolute value of a number.    Calculate absolute value.
    
   ABS(number)
    
    
    
    
    
    
    
** ACOS
   
   Returns the Inverse Cosine 
   
   
   
** ACOSH
   
   Returns the hyperbolic arccosine of a number.
   
   
   
** ACOT
   
   Returns the principal value of the arccotangent, or inverse cotangent, of a number.
   
   
   
** ACOTH
   
   Returns the inverse hyperbolic cotangent of a number.
   
   
   
** ADD
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Add two factors.
   
   
   
** AGGREGATE
   
   Returns an aggregate in a list or database. 
   
   Reference form
   
   AGGREGATE(function_num, options, ref1, [ref2], …)
   
   Array form
   
   AGGREGATE(function_num, options, array, [k])
   
   Agreement Functions:
   
   | function_num | Function       |
   |--------------+----------------|
   |            1 | AVERAGE        |
   |            2 | COUNT          |
   |            3 | COUNTA         |
   |            4 | MAX            |
   |            5 | MIN            |
   |            6 | PRODUCT        |
   |            7 | STDEV.S        |
   |            8 | STDEV.P        |
   |            9 | SUM            |
   |           10 | VAR.S          |
   |           11 | VAR.P          |
   |           12 | MEDIAN         |
   |           13 | MODE.SNGL      |
   |           14 | LARGE          |
   |           15 | SMALL          |
   |           16 | PERCENTILE.INC |
   |           17 | QUARTILE.INC   |
   |           18 | PERCENTILE.EXC |
   |           19 | QUARTILE.EXC   |
   
** ARABIC
   
   Converts a Roman numeral to an Arabic numeral.
   
** ASIN
   
   Returns the arcsine, or inverse sine, of a number.
   
   
   
** ASINH
   
   Returns the hyperbolic arcsine of a number.
   
   
   
** ATAN
   
   Returns the arctangent (in radians) of a number.
   
   
   
** ATAN2
   
   Returns the arctangent of the quotient of its arguments.
   
   
   
** ATANH
   
   Returns the hyperbolic arctangent of a number.
   
   
   
** BASE							   
   
   Converts a number into a text representation with the given radix (base).
   
   
   
** CEILING							   
   
   Returns number rounded up, away from zero, to the nearest multiple of significance. 
   
   
   
   
   
   
   
   
   
   
   
** COMBIN							   
   
   Returns the number of combinations for a given number of items.
   
   
   
** COMBINA							   
   
   Returns the number of combinations (with repetitions) for a given number of items.
   
** COS							   
   
   Returns the cosine of the given angle.
   
   
   
** COSH
   
   Returns the hyperbolic cosine of a number.
   
   
   
** COT							   
   
   Return the cotangent of an angle specified in radians.
   
   
   
** COTH							   
   
   Return the hyperbolic cotangent of a hyperbolic angle.
   
   
   
** CSC							   
   
   Returns the cosecant of an angle specified in radians.
   
   
   
** CSCH							   
   
   Return the hyperbolic cosecant of an angle specified in radians.
   
   
   
** DECIMAL							   
   
   Converts a text representation of a number in a given base into a decimal number.
   
   
   
** DEGREES							   
   
   Converts radians into degrees.
   
   
   
** DIVIDE							   
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Divide two factors.
   
   
   
** EQ							   
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Check equivalence of two factors.
   
   
   
** EVEN							   
   
   Returns number rounded up to the nearest even integer. 
   
   
   
   
   
   
   
   
   
   
** EXP							   
   
   Returns e raised to the power of number.
   
   
   
   
** FACT
   
   Returns the factorial of a number.
   
   
   
   
   
   
   
** FACTDOUBLE						   
   
   Returns the double factorial of a number.
   
   
   
   
   
** FLOOR
   
   Returns a number rounded down to a multiple of another number.
   
   
   
   
   
** GCD
   
   Returns the greatest common divisor of two or more integers. The greatest common divisor is the largest integer that divides both number1 and number2 without a remainder.
   
   
   
   
   
** GT							   
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Returns true when a > b.
   
   
   
   
   
** GTE							   
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Returns true when a >= b.
   
   
   
   
   
** INT							   
   
   Rounds a number down to the nearest integer.
   
   
   
** LCM							   
** LOG
   
   Returns a number rounded down to a multiple of another number.
   
   
   
   
   
** LOG10
   
   Returns the base-10 logarithm of a number.
   
   
   
** LT
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Returns true when a < b.
   
   
   
   
   
** LTE
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Returns true when a >= b.
   
   
   
   
   
** MDETERM
   
   Returns the matrix determinant of an array.
   
   Look at https://github.com/sloisel/numeric/blob/master/src/numeric.js for ideas to implement.
   
** MINUS
   
   Subtract two factors.
   
   
   
** MINVERSE
   
   Returns the inverse matrix for the matrix stored in an array.
   
** MMULT
   
   Returns the matrix product of two arrays. The result is an array with the same number of rows as array1 and the same number of columns as array2.
   
** MOD
   
   Returns the remainder when of two factors.
   
   
   
   
   
** MROUND
   
   Returns a number rounded to the desired multiple.
   
** MULTINOMIAL
   
   Returns the ratio of the factorial of a sum of values to the product of factorials.
   
** MULTIPLY
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Multiply two factors.
   
   
   
   
   
** ODD
   
   Returns number rounded up to the nearest odd integer.
   
** PI
   
   Returns the value for the univeral constant PI.
   
   
   
** POWER
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Returns the the nth power of a number.
   
   
   
** PRODUCT
   
   Returns the product of the arguments.
   
   
   
   
   
** QUOTIENT
   
   Returns the integer portion of a divisor.
   
   
   
** RADIANS
   
   Convert degrees to radians.
   
   
   
** RAND
   
   Generate a random number.
   
   
   
** RANDBETWEEN
   
   Generate a random number between two values.
   
   
   
** ROMAN
   
   Converts an arabic numeral to roman, as text.
   
** ROUND
   
   Round number with precision.
   
   
   
** ROUNDDOWN
** ROUNDUP
   
   Rounds a number up, away from 0 (zero).
   
   
   
   
   
   
   
   
   
** SEC
** SECH
** SERIESSUM
** SIGN
** SIN
** SQRT
** SQRTPI
** SUBTOTAL
** SUM
   :PROPERTIES: 
   :github:   y
   :npm:      y
   :END:      
   
   Calculate SUM of list of numbers.
   
   
   
* Financial
  :PROPERTIES:
  :ID:       financial
  :END:
** ACCRINT
   
   Returns the accrued interest for a security that pays periodic interest.
   
   
   
   
   
   Example: Accrued interest test
    
   #+NAME:  AccruedInterestTest
   |----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | Data                                         | Description                                                                                                                                                                |
   |----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | 3/1/2008                                     | Issue date                                                                                                                                                                 |
   | 8/31/2008                                    | First interest date                                                                                                                                                        |
   | 5/1/2008                                     | Settlement date                                                                                                                                                            |
   | =10.0%                                       | Coupon rate                                                                                                                                                                |
   | =1000                                        | Par value                                                                                                                                                                  |
   | =2                                           | Frequency is semiannual (see above)                                                                                                                                        |
   | =0                                           | 30/360 basis (see above)                                                                                                                                                   |
   | Formula                                      | Description (Result)                                                                                                                                                       |
   |----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | =ACCRINT(A2,A3,A4,A5,A6,A7,A8)               | Accrued interest for a treasury bond with the terms above (16.66666667)                                                                                                    |
   | =ACCRINT(DATE(2008,3,5),A3,A4,A5,A6,A7,A8,0) | Accrued interest with the terms above, except the issue date is March 5, 2008. (15.55555556)                                                                               |
   | =ACCRINT(DATE(2008,3,5),A3,A4,A5,A6,A7,A8,0) | Accrued interest with the terms above, except the issue date is April 5, 2008, and the accrued interest is calculated from the first_interest to settlement. (7.222222222) |
   |----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    
** ACCRINTM
   
   Returns the accrued interest for a security that pays interest at maturity.
   
   ACCRINTM(issue, settlement, rate, par, [basis])
    
** AMORLINC
   
   Returns the depreciation for each accounting period. This function is provided for the French accounting system. 
   If an asset is purchased in the middle of the accounting period, the prorated depreciation is taken into account.
   
** COUPDAYS
   
   Returns the number of days in the coupon period that contains the settlement date.
   
** COUPDAYSNC
   
   Returns the number of days from the settlement date to the next coupon date.
   
** COUPNCD
   
   Returns a number that represents the next coupon date after the settlement date.
   
** COUPNUM
   
   Returns the number of coupons payable between the settlement date and maturity date, rounded up to the nearest whole coupon.
   
** COUPPCD
   
   Returns a number that represents the previous coupon date before the settlement date.
   
** CUMIPMT
   
   Returns the cumulative interest paid on a loan between start_period and end_period.
   
** CUMPRINC
   
   Returns the cumulative principal paid on a loan between start_period and end_period.
   
** DB
   
   Returns the depreciation of an asset for a specified period using the fixed-declining balance method.
   
** DDB
   
   Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.
   
** DISC
   
   Returns the discount rate for a security.
   
** DOLLARDE
** DOLLARFR
** DURATION
** EFFECT
** FV
   
   Returns the future value of an initial sum with a subsequent stream of payments.
   
   
   
** FVSCHEDULE
** INTRATE
** IRR
** IPMT
   Returns the portion of the periodic payment which is interest for a fixed rate loan or annuity.
   
   
   
** MDURATION
** MIRR
** NOMINAL
** NPER
   
   Returns the number of payment periods for an annuity.
   
   
   
** NPV
   Returns the net present value of an investment with regular cash payments.
   
   
   
** ODDFPRICE
** ODDFYIELD
** PMT
   
   Returns the payment per period for a fixed rate loan.
   
   
   
** PV
   
   Returns the present value of a stream of future payments with a final lump sum.
   
   
   
* Stats
  :PROPERTIES:
  :ID:       stats
  :END:
** AVEDEV
** AVERAGE
   
   Compute the average of a range or array
   
   
   
** AVERAGEA
** AVERAGEIF
** AVERAGEIFS
** CORREL
** COUNT
** COUNTA
** COUNTIN
** COUNTBLANK
** COUNTIF
   
   Return count of fields that match a criterion
   
   
   
   
   
   
   
** COUNTIFS
** COUNTUNIQUE
** DEVSQ
** FISHER
** FISHERINV
** FORECAST
** FREQUENCY
** GAMMALN
** GEOMEAN
** GROWTH
** HARMEAN
** INTERCEPT
** KURT
** LARGE
** LINEST
** LOGEST
** MAX
   
   Returns the maximum of a list of arguments, ignoring text entries
   
   
   
** MAXA
** MEDIAN
** MIN
   Returns the minimum of a list of arguments, ignoring text entries
   
   
** MINA
** PEARSON
** PERMUT
** PERMUTATIONA
** PHI
** PROB
** RSQ
** SKEW
** SLOPE
** SMALL
** STANDARDIZE
** STDEVA
** STDEVPA
** STEYX
** TRANSPOSE
** TREND
** TRIMMEAN
** VARA
** VARPA
* Engineering
  :PROPERTIES:
  :ID:       eng
  :END:
** BESSELI
   
   
   
** BESSELJ
   
   
   
** BESSELK
** BESSELY
** DONE BIN2DEC
   
   Convert a binary number to a decimal number with a maximum of 10 characters (bits). 
   
   
   
   
   
   
   
   
   
** BIN2HEX
** BIN2OCT
** BITAND
** BITLSHIFT
** BITOR
** BITRSHIFT
** BITXOR
** COMPLEX
** CONVERT
** DEC2BIN
** DEC2HEX
** DEC2OCT
** DELTA
** ERF
** ERFC
** GESTEP
** HEX2BIN
** HEX2DEC
** HEX2OCT
** IMABS
** IMAGINARY
** IMARGUMENT
** IMCONJUGATE
** IMCOS
** IMCOSH
** IMCOT
** IMDIV
** IMEXP
** IMLN
** IMLOG19
** IMLOG2
** IMPOWER
** IMPRODUCT
** IMREAL
** IMSEC
** IMSECH
** IMSIN
** IMSINH
** IMSQRT
** IMCSC
** IMCSCH
** IMSUB
** IMTAN
** OCT2BIN
** OCT2DEC
** OCT2HEX
  
